npm init --> creates package.json

1.package.json file is introduced to have configuration of npm, it keeps a track of what versions of packages we have 

2.package.lock.json file has the record of exact versions of all the transitive dependencies we are using and make sure of dev and prod env code set up will be same

3.why we don't push node modules folder to git as we can regenerate them using npm install as we have package.json and package.lock.json and we should push these two folders to git. 

4.^ caret sign will take care of minor versions of parcel

5.~ tild operator is responsible for major versions so we should avoid it 

6. NPM is a package management that is used to install, uninstall, and update Javascript packages on your workstation, whereas NPX is a package executer that is used to directly execute Javascript packages without installing them.

7. JSX is a syntax through which we can write our React code easliy, it's not HTML(it looks like HTML but not HTML).

8. If we are using attributes in JSX, we need to write it in camelCasing, not like HTML attribute

9. React components - two types of components : 
    Classbased components,
    Functional components
Functional component - It is a Javascript Function which returns React Element(JSX)

10. Because of JSX we can write readable code, faster.

11. Just like we pass arguments to a func, props are passing to the component.

12. Configure driven UI - we can configure UI as per the data is sending or how the data is coming from backend we can configure UI according to that as Swiggy app is same but the data will be different for different cities.

13. Hooks - Normal JS utility functions
  # useState - when any state variable updates, react will re-render the component


14. Separation of concerns/Single responsibility principle - Microservices - This architecture works like it is a collection of smaller, 
independently deployable services.
Separation of Concerns in microservices architecture refers to the practice of 
designing services so that each microservice is focused on a single, 
well-defined responsibility or concern. 
This principle ensures modularity, scalability, and maintainability of the system by dividing it into distinct units that handle specific tasks.

15. Monolithic architecture is a traditional software development model that uses a single code base for an application


filter()